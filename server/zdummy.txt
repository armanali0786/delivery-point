// import express from 'express';
// import bodyParser from 'body-parser';
// import mongoose from 'mongoose';
// import path from 'path';
// import { AdminRoute, VandorRoute } from './routes';
// import { MONGO_URI } from './config';
// import cors from 'cors';

// const app = express();

// app.use(cors());
// app.use(bodyParser.json());
// app.use(bodyParser.urlencoded({ extended: true }));
// app.use('/images', express.static(path.join(__dirname, 'images')));

// app.use('/admin',AdminRoute);
// app.use('/vandor',VandorRoute);

// interface CustomConnectOptions extends mongoose.ConnectOptions {
//     useNewUrlParser: boolean;
// }

// const connectOptions: CustomConnectOptions = {
//     useNewUrlParser: true,
// };

// mongoose.connect(MONGO_URI, connectOptions)
//     .then(() => {
//         console.log('Connected to MongoDB');
//     })
//     .catch((error) => {
//         console.error('Error connecting to MongoDB:', error);
//     });

// app.listen(8080 , () => {
//     console.log("app listening on port no 8080")
// });

   try {
        const { foodType } = req.query;
        // Check if foodType parameter exists and is a string
        if (!foodType || typeof foodType !== 'string') {
            return res.status(400).json({
                status: 400,
                message: 'Valid "foodType" parameter is required as a comma-separated string'
            });
        }

        // Split comma-separated foodType string into an array
        const selectedCategories = foodType.split(',');

        // Normalize foodType to lowercase
        const normalizedCategories = selectedCategories.map(category => category.trim().toLowerCase());

        // Query database to find foods by foodType (case-insensitive)
        const foods = await Food.find({ 
            foodType: { $in: normalizedCategories.map(c => new RegExp(c, 'i')) }
        });

        // Check if any foods are found
        if (foods && foods.length > 0) {
            return res.status(200).json(foods);
        } else {
            return res.status(404).json({
                status: 404,
                message: 'No food found for the specified foodType'
            });
        }
    } catch (error) {
        console.error('Error fetching food data:', error);
        return res.status(500).json({ message: 'Internal Server Error' });
    }