<div className='grid gap-x-4 gap-y-4 grid-cols-3 mt-5'>
          <CardSlider  {...settings}>
            <div className='row px-3'>
              <img src={Manchurain} className='rounded-xl w-full h-[60%] h-30 object-cover' />
              <div className='p-3'>
                <p className='text-base font-bold	'>Pizza hut</p>
                <div className='flex'>
                  <svg width="20" height="20" viewBox="0 0 20 20" fill="none" role="img" aria-hidden="true" strokeColor="rgba(2, 6, 12, 0.92)" fillColor="rgba(2, 6, 12, 0.92)"><circle cx="10" cy="10" r="9" fill="url(#StoreRating20_svg__paint0_linear_32982_71567)"></circle><path d="M10.0816 12.865C10.0312 12.8353 9.96876 12.8353 9.91839 12.865L7.31647 14.3968C6.93482 14.6214 6.47106 14.2757 6.57745 13.8458L7.27568 11.0245C7.29055 10.9644 7.26965 10.9012 7.22195 10.8618L4.95521 8.99028C4.60833 8.70388 4.78653 8.14085 5.23502 8.10619L8.23448 7.87442C8.29403 7.86982 8.34612 7.83261 8.36979 7.77777L9.54092 5.06385C9.71462 4.66132 10.2854 4.66132 10.4591 5.06385L11.6302 7.77777C11.6539 7.83261 11.706 7.86982 11.7655 7.87442L14.765 8.10619C15.2135 8.14085 15.3917 8.70388 15.0448 8.99028L12.7781 10.8618C12.7303 10.9012 12.7095 10.9644 12.7243 11.0245L13.4225 13.8458C13.5289 14.2757 13.0652 14.6214 12.6835 14.3968L10.0816 12.865Z" fill="white"></path><defs><linearGradient id="StoreRating20_svg__paint0_linear_32982_71567" x1="10" y1="1" x2="10" y2="19" gradientUnits="userSpaceOnUse"><stop stop-color="#21973B"></stop><stop offset="1" stop-color="#128540"></stop></linearGradient></defs></svg>
                  <div>4</div>
                </div>
                <div>Location</div>
              </div>
            </div>
            <div className='row px-3'>
              <img src={Sandwich} className='rounded-xl w-full h-[60%] h-30 object-cover' />
              <div className='p-3'>
                <p className='text-base font-bold	'>Pizza hut</p>
                <div className='flex'>
                  <svg width="20" height="20" viewBox="0 0 20 20" fill="none" role="img" aria-hidden="true" strokeColor="rgba(2, 6, 12, 0.92)" fillColor="rgba(2, 6, 12, 0.92)"><circle cx="10" cy="10" r="9" fill="url(#StoreRating20_svg__paint0_linear_32982_71567)"></circle><path d="M10.0816 12.865C10.0312 12.8353 9.96876 12.8353 9.91839 12.865L7.31647 14.3968C6.93482 14.6214 6.47106 14.2757 6.57745 13.8458L7.27568 11.0245C7.29055 10.9644 7.26965 10.9012 7.22195 10.8618L4.95521 8.99028C4.60833 8.70388 4.78653 8.14085 5.23502 8.10619L8.23448 7.87442C8.29403 7.86982 8.34612 7.83261 8.36979 7.77777L9.54092 5.06385C9.71462 4.66132 10.2854 4.66132 10.4591 5.06385L11.6302 7.77777C11.6539 7.83261 11.706 7.86982 11.7655 7.87442L14.765 8.10619C15.2135 8.14085 15.3917 8.70388 15.0448 8.99028L12.7781 10.8618C12.7303 10.9012 12.7095 10.9644 12.7243 11.0245L13.4225 13.8458C13.5289 14.2757 13.0652 14.6214 12.6835 14.3968L10.0816 12.865Z" fill="white"></path><defs><linearGradient id="StoreRating20_svg__paint0_linear_32982_71567" x1="10" y1="1" x2="10" y2="19" gradientUnits="userSpaceOnUse"><stop stop-color="#21973B"></stop><stop offset="1" stop-color="#128540"></stop></linearGradient></defs></svg>
                  <div>1</div>
                </div>
                <div>Location</div>
              </div>
            </div>
            <div className='row px-3'>
              <img src={Manchurain} className='rounded-xl w-full h-[60%] h-30 object-cover' />
              <div className='p-3'>
                <p className='text-base font-bold	'>Pizza hut</p>
                <div className='flex'>
                  <svg width="20" height="20" viewBox="0 0 20 20" fill="none" role="img" aria-hidden="true" strokeColor="rgba(2, 6, 12, 0.92)" fillColor="rgba(2, 6, 12, 0.92)"><circle cx="10" cy="10" r="9" fill="url(#StoreRating20_svg__paint0_linear_32982_71567)"></circle><path d="M10.0816 12.865C10.0312 12.8353 9.96876 12.8353 9.91839 12.865L7.31647 14.3968C6.93482 14.6214 6.47106 14.2757 6.57745 13.8458L7.27568 11.0245C7.29055 10.9644 7.26965 10.9012 7.22195 10.8618L4.95521 8.99028C4.60833 8.70388 4.78653 8.14085 5.23502 8.10619L8.23448 7.87442C8.29403 7.86982 8.34612 7.83261 8.36979 7.77777L9.54092 5.06385C9.71462 4.66132 10.2854 4.66132 10.4591 5.06385L11.6302 7.77777C11.6539 7.83261 11.706 7.86982 11.7655 7.87442L14.765 8.10619C15.2135 8.14085 15.3917 8.70388 15.0448 8.99028L12.7781 10.8618C12.7303 10.9012 12.7095 10.9644 12.7243 11.0245L13.4225 13.8458C13.5289 14.2757 13.0652 14.6214 12.6835 14.3968L10.0816 12.865Z" fill="white"></path><defs><linearGradient id="StoreRating20_svg__paint0_linear_32982_71567" x1="10" y1="1" x2="10" y2="19" gradientUnits="userSpaceOnUse"><stop stop-color="#21973B"></stop><stop offset="1" stop-color="#128540"></stop></linearGradient></defs></svg>
                  <div>2</div>
                </div>
                <div>Location</div>
              </div>
            </div>
            <div className='row px-3'>
              <img src={Manchurain} className='rounded-xl w-full h-[60%] h-30 object-cover' />
              <div className='p-3'>
                <p className='text-base font-bold	'>Pizza hut</p>
                <div className='flex'>
                  <svg width="20" height="20" viewBox="0 0 20 20" fill="none" role="img" aria-hidden="true" strokeColor="rgba(2, 6, 12, 0.92)" fillColor="rgba(2, 6, 12, 0.92)"><circle cx="10" cy="10" r="9" fill="url(#StoreRating20_svg__paint0_linear_32982_71567)"></circle><path d="M10.0816 12.865C10.0312 12.8353 9.96876 12.8353 9.91839 12.865L7.31647 14.3968C6.93482 14.6214 6.47106 14.2757 6.57745 13.8458L7.27568 11.0245C7.29055 10.9644 7.26965 10.9012 7.22195 10.8618L4.95521 8.99028C4.60833 8.70388 4.78653 8.14085 5.23502 8.10619L8.23448 7.87442C8.29403 7.86982 8.34612 7.83261 8.36979 7.77777L9.54092 5.06385C9.71462 4.66132 10.2854 4.66132 10.4591 5.06385L11.6302 7.77777C11.6539 7.83261 11.706 7.86982 11.7655 7.87442L14.765 8.10619C15.2135 8.14085 15.3917 8.70388 15.0448 8.99028L12.7781 10.8618C12.7303 10.9012 12.7095 10.9644 12.7243 11.0245L13.4225 13.8458C13.5289 14.2757 13.0652 14.6214 12.6835 14.3968L10.0816 12.865Z" fill="white"></path><defs><linearGradient id="StoreRating20_svg__paint0_linear_32982_71567" x1="10" y1="1" x2="10" y2="19" gradientUnits="userSpaceOnUse"><stop stop-color="#21973B"></stop><stop offset="1" stop-color="#128540"></stop></linearGradient></defs></svg>
                  <div>2</div>
                </div>
                <div>Location</div>
              </div>
            </div>
            <div className='row px-3'>
              <img src={Manchurain} className='rounded-xl w-full h-[60%] h-30 object-cover' />
              <div className='p-3'>
                <p className='text-base font-bold	'>Pizza hut</p>
                <div className='flex'>
                  <svg width="20" height="20" viewBox="0 0 20 20" fill="none" role="img" aria-hidden="true" strokeColor="rgba(2, 6, 12, 0.92)" fillColor="rgba(2, 6, 12, 0.92)"><circle cx="10" cy="10" r="9" fill="url(#StoreRating20_svg__paint0_linear_32982_71567)"></circle><path d="M10.0816 12.865C10.0312 12.8353 9.96876 12.8353 9.91839 12.865L7.31647 14.3968C6.93482 14.6214 6.47106 14.2757 6.57745 13.8458L7.27568 11.0245C7.29055 10.9644 7.26965 10.9012 7.22195 10.8618L4.95521 8.99028C4.60833 8.70388 4.78653 8.14085 5.23502 8.10619L8.23448 7.87442C8.29403 7.86982 8.34612 7.83261 8.36979 7.77777L9.54092 5.06385C9.71462 4.66132 10.2854 4.66132 10.4591 5.06385L11.6302 7.77777C11.6539 7.83261 11.706 7.86982 11.7655 7.87442L14.765 8.10619C15.2135 8.14085 15.3917 8.70388 15.0448 8.99028L12.7781 10.8618C12.7303 10.9012 12.7095 10.9644 12.7243 11.0245L13.4225 13.8458C13.5289 14.2757 13.0652 14.6214 12.6835 14.3968L10.0816 12.865Z" fill="white"></path><defs><linearGradient id="StoreRating20_svg__paint0_linear_32982_71567" x1="10" y1="1" x2="10" y2="19" gradientUnits="userSpaceOnUse"><stop stop-color="#21973B"></stop><stop offset="1" stop-color="#128540"></stop></linearGradient></defs></svg>
                  <div>2</div>
                </div>
                <div>Location</div>
              </div>
            </div>
            <div className='row px-3'>
              <img src={Manchurain} className='rounded-xl w-full h-[60%] h-30 object-cover' />
              <div className='p-3'>
                <p className='text-base font-bold	'>Pizza hut</p>
                <div className='flex'>
                  <svg width="20" height="20" viewBox="0 0 20 20" fill="none" role="img" aria-hidden="true" strokeColor="rgba(2, 6, 12, 0.92)" fillColor="rgba(2, 6, 12, 0.92)"><circle cx="10" cy="10" r="9" fill="url(#StoreRating20_svg__paint0_linear_32982_71567)"></circle><path d="M10.0816 12.865C10.0312 12.8353 9.96876 12.8353 9.91839 12.865L7.31647 14.3968C6.93482 14.6214 6.47106 14.2757 6.57745 13.8458L7.27568 11.0245C7.29055 10.9644 7.26965 10.9012 7.22195 10.8618L4.95521 8.99028C4.60833 8.70388 4.78653 8.14085 5.23502 8.10619L8.23448 7.87442C8.29403 7.86982 8.34612 7.83261 8.36979 7.77777L9.54092 5.06385C9.71462 4.66132 10.2854 4.66132 10.4591 5.06385L11.6302 7.77777C11.6539 7.83261 11.706 7.86982 11.7655 7.87442L14.765 8.10619C15.2135 8.14085 15.3917 8.70388 15.0448 8.99028L12.7781 10.8618C12.7303 10.9012 12.7095 10.9644 12.7243 11.0245L13.4225 13.8458C13.5289 14.2757 13.0652 14.6214 12.6835 14.3968L10.0816 12.865Z" fill="white"></path><defs><linearGradient id="StoreRating20_svg__paint0_linear_32982_71567" x1="10" y1="1" x2="10" y2="19" gradientUnits="userSpaceOnUse"><stop stop-color="#21973B"></stop><stop offset="1" stop-color="#128540"></stop></linearGradient></defs></svg>
                  <div>2</div>
                </div>
                <div>Location</div>
              </div>
            </div>
            <div className='row px-3'>
              <img src={Manchurain} className='rounded-xl w-full h-[60%] h-30 object-cover' />
              <div className='p-3'>
                <p className='text-base font-bold	'>Pizza hut</p>
                <div className='flex'>
                  <svg width="20" height="20" viewBox="0 0 20 20" fill="none" role="img" aria-hidden="true" strokeColor="rgba(2, 6, 12, 0.92)" fillColor="rgba(2, 6, 12, 0.92)"><circle cx="10" cy="10" r="9" fill="url(#StoreRating20_svg__paint0_linear_32982_71567)"></circle><path d="M10.0816 12.865C10.0312 12.8353 9.96876 12.8353 9.91839 12.865L7.31647 14.3968C6.93482 14.6214 6.47106 14.2757 6.57745 13.8458L7.27568 11.0245C7.29055 10.9644 7.26965 10.9012 7.22195 10.8618L4.95521 8.99028C4.60833 8.70388 4.78653 8.14085 5.23502 8.10619L8.23448 7.87442C8.29403 7.86982 8.34612 7.83261 8.36979 7.77777L9.54092 5.06385C9.71462 4.66132 10.2854 4.66132 10.4591 5.06385L11.6302 7.77777C11.6539 7.83261 11.706 7.86982 11.7655 7.87442L14.765 8.10619C15.2135 8.14085 15.3917 8.70388 15.0448 8.99028L12.7781 10.8618C12.7303 10.9012 12.7095 10.9644 12.7243 11.0245L13.4225 13.8458C13.5289 14.2757 13.0652 14.6214 12.6835 14.3968L10.0816 12.865Z" fill="white"></path><defs><linearGradient id="StoreRating20_svg__paint0_linear_32982_71567" x1="10" y1="1" x2="10" y2="19" gradientUnits="userSpaceOnUse"><stop stop-color="#21973B"></stop><stop offset="1" stop-color="#128540"></stop></linearGradient></defs></svg>
                  <div>2</div>
                </div>
                <div>Location</div>
              </div>
            </div>
            <div className='row px-3'>
              <img src={Manchurain} className='rounded-xl w-full h-[60%] h-30 object-cover' />
              <div className='p-3'>
                <p className='text-base font-bold	'>Pizza hut</p>
                <div className='flex'>
                  <svg width="20" height="20" viewBox="0 0 20 20" fill="none" role="img" aria-hidden="true" strokeColor="rgba(2, 6, 12, 0.92)" fillColor="rgba(2, 6, 12, 0.92)"><circle cx="10" cy="10" r="9" fill="url(#StoreRating20_svg__paint0_linear_32982_71567)"></circle><path d="M10.0816 12.865C10.0312 12.8353 9.96876 12.8353 9.91839 12.865L7.31647 14.3968C6.93482 14.6214 6.47106 14.2757 6.57745 13.8458L7.27568 11.0245C7.29055 10.9644 7.26965 10.9012 7.22195 10.8618L4.95521 8.99028C4.60833 8.70388 4.78653 8.14085 5.23502 8.10619L8.23448 7.87442C8.29403 7.86982 8.34612 7.83261 8.36979 7.77777L9.54092 5.06385C9.71462 4.66132 10.2854 4.66132 10.4591 5.06385L11.6302 7.77777C11.6539 7.83261 11.706 7.86982 11.7655 7.87442L14.765 8.10619C15.2135 8.14085 15.3917 8.70388 15.0448 8.99028L12.7781 10.8618C12.7303 10.9012 12.7095 10.9644 12.7243 11.0245L13.4225 13.8458C13.5289 14.2757 13.0652 14.6214 12.6835 14.3968L10.0816 12.865Z" fill="white"></path><defs><linearGradient id="StoreRating20_svg__paint0_linear_32982_71567" x1="10" y1="1" x2="10" y2="19" gradientUnits="userSpaceOnUse"><stop stop-color="#21973B"></stop><stop offset="1" stop-color="#128540"></stop></linearGradient></defs></svg>
                  <div>2</div>
                </div>
                <div>Location</div>
              </div>
            </div>
          </CardSlider>
        </div>


        {/* <div className="relative z-50 flex flex-col items-center justify-between h-48 lg:space-x-8 pt-7 lg:pt-0 lg:flex-row lg:justify-between lg:w-90">
          <button
            className="pt-3 pb-3 pl-12 pr-12 text-2xl font-semibold text-center text-white transition-all bg-orange-600 rounded-full shadow-2xl lg:ml-5 hover:bg-orange-700 focus:outline-none ring-4 ring-orange-600 lg:ring-2 lg:font-medium "
          >
            {mainActionText}
          </button>
          <button
            className="pt-3 pb-3 text-2xl font-semibold text-center text-orange-500 transition-all rounded-full shadow-2xl lg:mr-5 hover:text-orange-500 hover:bg-gray-50 pl-11 pr-11 bg-gray-50 focus:outline-none ring-4 ring-orange-500 lg:font-medium lg:text-gray-50 lg:bg-opacity-0 lg:ring-2 lg:ring-white"
          >
            {extraActionText}
          </button>
        </div> */}

                  {/* <h1 className="text-3xl sm:text-4xl text-orange-600 text-center font-semibold tracking-wider">
            Flavors Of India
          </h1> */}

                {/* <div>
          <p className="p-4 pt-6 font-sans text-2xl leading-10 text-center text-gray-500 lg:text-gray-200">
            {description}
          </p>
        </div> */}





        // import React,{useState} from 'react'
// import { Link } from 'react-router-dom';

// export default function Navbar() {
//     const [activeLink, setActiveLink] = useState('');

//     return (
//         <section class="w-full px-8 text-gray-700 bg-white">
//             <div class="container flex flex-col flex-wrap items-center justify-between py-5 mx-auto md:flex-row max-w-7xl">
//                 <div class="relative flex flex-col md:flex-row">
//                     <a href="#_" class="flex items-center mb-5 font-medium text-gray-900 lg:w-auto lg:items-center lg:justify-center md:mb-0">
//                         <span class="mx-auto text-xl font-black leading-none text-gray-900 select-none">DeliveryPoint<span class="text-indigo-600">.</span></span>
//                     </a>
//                     <nav className="flex flex-wrap items-center mb-5 text-base md:mb-0 md:pl-8 md:ml-8 md:border-l md:border-gray-200">
//                         <Link to="/" className="mr-5 font-medium leading-6 text-black hover:text-[#5B63B7]">Home</Link>
//                         <Link to="/menu" className="mr-5 font-medium leading-6 text-black hover:text-[#5B63B7]">Menu</Link>
//                         <Link to="/services" className="mr-5 font-medium leading-6 text-black hover:text-[#5B63B7]">Service</Link>
//                         <Link to="/categories" className="mr-5 font-medium leading-6 text-black hover:text-[#5B63B7]">Category</Link>
//                     </nav>
//                 </div>
//                 <div class="inline-flex items-center ml-5 space-x-6 lg:justify-end">
//                     <Link to="/login" class="text-base font-medium leading-6 text-black whitespace-no-wrap transition duration-150 ease-in-out hover:text-[#5B63B7]">
//                         Sign in
//                     </Link>
//                     <Link to="/sign-up" class="inline-flex items-center justify-center px-4 py-2 text-base font-medium leading-6 text-white whitespace-no-wrap bg-indigo-600 border border-transparent rounded-md shadow-sm hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-600">
//                         Sign up
//                     </Link>
//                     <svg
//                         className="text-[#5B63B7] w-10 h-10 hover:text-orange-600 text-white cursor-pointer hidden sm:block"
//                         xmlns="http://www.w3.org/2000/svg"
//                         width="24"
//                         height="24"
//                         fill="none"
//                         viewBox="0 0 24 24"
//                         stroke="currentColor"
//                     >
//                         <path
//                             stroke-linecap="round"
//                             stroke-linejoin="round"
//                             stroke-width="1"
//                             d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"
//                         />
//                     </svg>
//                 </div>
//             </div>
//         </section>
//     )
// }



                // <a key={vendor.id} className="hover:bg-gray-200 p-5 hover:rounded-lg flex flex-col justify-between cursor-pointer" >
                //     <div className="aspect-w-6 aspect-h-5 overflow-hidden rounded-lg">
                //         <img
                //             src={`https://delivery-point.onrender.com/images/${vendor.coverImages[0]}`}
                //             className="object-cover w-full h-full"
                //             alt={vendor.name}
                //         />
                //     </div>
                //     <div className="flex mt-4">
                //         <h3 className="text-sm font-bold text-[#222222]">{vendor.name}</h3>
                //         <p className="mt-1 text-sm text-[#222222]">{vendor.foodType}</p>
                //         <span>
                //             <svg width="20" height="20" viewBox="0 0 20 20" fill="none" role="img" aria-hidden="true" strokeColor="rgba(2, 6, 12, 0.92)" fillColor="rgba(2, 6, 12, 0.92)"><circle cx="10" cy="10" r="9" fill="url(#StoreRating20_svg__paint0_linear_32982_71567)"></circle><path d="M10.0816 12.865C10.0312 12.8353 9.96876 12.8353 9.91839 12.865L7.31647 14.3968C6.93482 14.6214 6.47106 14.2757 6.57745 13.8458L7.27568 11.0245C7.29055 10.9644 7.26965 10.9012 7.22195 10.8618L4.95521 8.99028C4.60833 8.70388 4.78653 8.14085 5.23502 8.10619L8.23448 7.87442C8.29403 7.86982 8.34612 7.83261 8.36979 7.77777L9.54092 5.06385C9.71462 4.66132 10.2854 4.66132 10.4591 5.06385L11.6302 7.77777C11.6539 7.83261 11.706 7.86982 11.7655 7.87442L14.765 8.10619C15.2135 8.14085 15.3917 8.70388 15.0448 8.99028L12.7781 10.8618C12.7303 10.9012 12.7095 10.9644 12.7243 11.0245L13.4225 13.8458C13.5289 14.2757 13.0652 14.6214 12.6835 14.3968L10.0816 12.865Z" fill="white"></path><defs><linearGradient id="StoreRating20_svg__paint0_linear_32982_71567" x1="10" y1="1" x2="10" y2="19" gradientUnits="userSpaceOnUse"><stop stop-color="#21973B"></stop><stop offset="1" stop-color="#128540"></stop></linearGradient></defs></svg>
                //         </span>
                //         <p className="text-lg font-medium text-gray-900 mx-2">
                //             {vendor.rating}</p>
                //         <p className="text-sm text-[#222222]">{vendor.category}</p>
                //         <p className="text-sm text-[#222222]"><FaRupeeSign />{food.readyTime}</p>
                //         <p className="mt-2 text-sm text-[#222222]"><MdLocationOn />{vendor.address}</p>
                //     </div>
                // </a>








                import React, { useEffect, useState, useMemo } from 'react';
import axios from 'axios';
import MenuItem from '../components/MenuItem';
import Filter from '../components/Filter';
import LocationList from '../components/LocationList';
import FilterIcon from '../assets/filter.svg';
import FoodSlider from '../components/FoodSlider';

export default function MenuList() {
  const [vendors, setVendors] = useState([]);

  useEffect(() => {
    const fetchVendors = async () => {
      try {
        const response = await axios.get('https://delivery-point.onrender.com/12345', {
          headers: {
            'Content-Type': 'application/json',
          },
        });
        setVendors(response.data);
      } catch (error) {
        console.error('Error fetching vendors:', error);
      }
    };

    fetchVendors();
  }, []);

  const foods = useMemo(() => {
    return vendors.flatMap((vendor) =>
      vendor.foods.map((food) => ({
        vendorId: vendor._id,
        vendorName: vendor.name,
        foodId: food._id,
        foodName: food.name,
        description: food.description,
        category: food.category,
        foodType: food.foodType,
        price: food.price,
        rating: food.rating,
        readyTime: food.readyTime,
        images: food.images,
      }))
    );
  }, [vendors]);

  return (
    <div className="container bg-gray-100">
      <div className="mx-auto max-w-2xl px-4 py-10 sm:px-6 sm:py-16 lg:max-w-7xl lg:px-8">
        <div className="pb-5">
          <LocationList />
        </div>
        <FoodSlider />
        <div className="mt-20">
          <h1 className="text-xl text-[#222222] font-semibold pb-5 px-5">
            Restaurants with online food delivery in Rajkot
          </h1>
          <div className="py-1 flex">
            <Filter text={'Filters'} FilterType={'checkbox'} FilterIcon={FilterIcon} />
            <Filter text={'Sort By'} FilterType={'radio'} />
            <button className="ml-4 border-2 w-20 rounded-3xl border-slate-500 hover:bg-[#5B63B7] hover:text-white hover:border-white">
              Offers
            </button>
            <button className="ml-4 border-2 w-36 rounded-3xl border-slate-500 hover:bg-[#5B63B7] hover:text-white hover:border-white">
              Fast Delivery
            </button>
            <button className="ml-4 border-2 w-36 rounded-3xl border-slate-500 hover:bg-[#5B63B7] hover:text-white hover:border-white">
              Rating 4.0+
            </button>
            <button className="ml-4 border-2 w-48 rounded-3xl border-slate-500 hover:bg-[#5B63B7] hover:text-white hover:border-white">
              New on DeliveryPoint
            </button>
          </div>
        </div>

        <div className="mt-2 grid grid-cols-1 gap-x-4 gap-y-10 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 xl:gap-x-8">
          {vendors.map((vendor) => (
            <MenuItem key={vendor._id} vendor={vendor} foods={foods} />
          ))}
        </div>
      </div>
    </div>
  );
}

import React from 'react'
import Manchurain from '../assets/manchurian1.jpeg';
import { MdLocationOn } from "react-icons/md";

function MenuItem({ vendor, foods }) {
    return (
        <>
            {foods.map((food) => (
                <div class="w-full max-w-sm bg-white hover:bg-gray-200 border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 cursor-pointer">
                    <img class="p-2 rounded-t-lg w-full h-[230px]" src={`https://delivery-point.onrender.com/images/${food.images[0]}`} alt="product image" />
                    <div class="px-5 pb-2">
                        <div class="flex items-center justify-between">
                            <h5 class="text-xl font-semibold tracking-tight text-gray-900 dark:text-white">{vendor.name}</h5>
                            <div className='flex items-center'>
                                <div class="items-center rtl:space-x-reverse">
                                    <svg width="20" height="20" viewBox="0 0 20 20" fill="none" role="img" aria-hidden="true" strokeColor="rgba(2, 6, 12, 0.92)" fillColor="rgba(2, 6, 12, 0.92)"><circle cx="10" cy="10" r="9" fill="url(#StoreRating20_svg__paint0_linear_32982_71567)"></circle><path d="M10.0816 12.865C10.0312 12.8353 9.96876 12.8353 9.91839 12.865L7.31647 14.3968C6.93482 14.6214 6.47106 14.2757 6.57745 13.8458L7.27568 11.0245C7.29055 10.9644 7.26965 10.9012 7.22195 10.8618L4.95521 8.99028C4.60833 8.70388 4.78653 8.14085 5.23502 8.10619L8.23448 7.87442C8.29403 7.86982 8.34612 7.83261 8.36979 7.77777L9.54092 5.06385C9.71462 4.66132 10.2854 4.66132 10.4591 5.06385L11.6302 7.77777C11.6539 7.83261 11.706 7.86982 11.7655 7.87442L14.765 8.10619C15.2135 8.14085 15.3917 8.70388 15.0448 8.99028L12.7781 10.8618C12.7303 10.9012 12.7095 10.9644 12.7243 11.0245L13.4225 13.8458C13.5289 14.2757 13.0652 14.6214 12.6835 14.3968L10.0816 12.865Z" fill="white"></path><defs><linearGradient id="StoreRating20_svg__paint0_linear_32982_71567" x1="10" y1="1" x2="10" y2="19" gradientUnits="userSpaceOnUse"><stop stop-color="#21973B"></stop><stop offset="1" stop-color="#128540"></stop></linearGradient></defs></svg>
                                </div>
                                <span class=" text-blue-800 text-md font-semibold px-2.5 py-0.5 rounded">{vendor.rating}</span>
                            </div>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-xl font-bold text-gray-900 dark:text-white"> ₹{food.price}</span>
                            <a href="#" class="text-black font-medium text-sm px-1 py-2.5 text-cent">{food.readyTime} min</a>
                        </div>
                        <div class="flex items-center mb-2">
                            <div class="flex items-center space-x-1 rtl:space-x-reverse">
                                <MdLocationOn />
                            </div>
                            <p className="mt-2 text-sm text-[#222222]">{vendor.address}</p>
                        </div>
                    </div>
                </div>
            ))}
        </>
    )
}

export default MenuItem



    // const handleCheckboxChange = (e) => {
    //     const category = e.target.id;
    //     if (e.target.checked) {
    //         setSelectedCategories([...selectedCategories, category]);
    //     } else {
    //         setSelectedCategories(selectedCategories.filter((item) => item !== category));
    //     }
    // };

    // useEffect(() => {
    //     if (selectedCategories.length === 0) {
    //         setSelectedCategories(['']);
    //     }
    // }, [selectedCategories]);



navigation &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


import React, { useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import Dpointlogo from '../assets/logo/Dpointlogo1.png';
import { useSelector } from 'react-redux';
import { getCartTotal } from '../cart/cartSlice';

export default function Navbar() {
    const location = useLocation();
    const { totalQuantity } = useSelector((state) => state.allCart);
    const [activeLink, setActiveLink] = useState('');
    const [isSignInOpen, setIsSignInOpen] = useState(false);

    const handleLogout = async () => {
        // Handle logout logic
    };

    const openSignIn = () => {
        setIsSignInOpen(true);
    };

    const closeSignIn = () => {
        setIsSignInOpen(false);
    };

    return (
        <header className="w-full px-8 bg-white">
            <nav className="flex items-center justify-between py-5 mx-auto max-w-7xl">
                {/* Logo and Brand */}
                <Link to="/" className="flex items-center">
                    <img src={Dpointlogo} alt="Logo" className="h-12 w-12 mr-2" />
                    <span className="text-xl font-black text-gray-900">Your Brand</span>
                </Link>

                {/* Navigation Links */}
                <div className="flex items-center space-x-8">
                    <NavLink to="/" label="Home" activeLink={activeLink} setActiveLink={setActiveLink} />
                    <NavLink to="/menu" label="Menu" activeLink={activeLink} setActiveLink={setActiveLink} />

                    {/* Search Bar (Optional) */}
                    <div className="relative">
                        <input
                            type="text"
                            placeholder="Search..."
                            className="border border-gray-300 rounded px-3 py-1 focus:outline-none focus:border-blue-500"
                        />
                        <button className="absolute right-2 top-1/2 transform -translate-y-1/2 px-2">
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                className="h-5 w-5 text-gray-500"
                                viewBox="0 0 20 20"
                                fill="currentColor"
                            >
                                <path
                                    fillRule="evenodd"
                                    d="M15.8284 14.5858L20 18.7574l-1.4142 1.4142-4.1716-4.1716a7.5 7.5 0 111.4142-1.4142zM6 13.5a7.5 7.5 0 115.9935 2.7492L17.744 18.74a1 1 0 11-1.4142 1.4142l-2.4988-2.4987A7.468 7.468 0 016 13.5z"
                                    clipRule="evenodd"
                                />
                            </svg>
                        </button>
                    </div>

                    {/* Cart Icon and Quantity */}
                    <Link to="/cart" className="relative">
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            className="h-6 w-6 text-gray-700 hover:text-gray-900"
                            viewBox="0 0 20 20"
                            fill="currentColor"
                        >
                            <path
                                fillRule="evenodd"
                                d="M10 18a2 2 0 100-4 2 2 0 000 4zM5 7a4 4 0 118 0H5z"
                                clipRule="evenodd"
                            />
                        </svg>
                        {totalQuantity > 0 && (
                            <span className="absolute top-0 right-0 bg-red-500 text-white rounded-full w-4 h-4 text-xs flex items-center justify-center">
                                {totalQuantity}
                            </span>
                        )}
                    </Link>

                    {/* Sign In Button */}
                    <button
                        className="text-sm text-gray-700 hover:text-gray-900"
                        onClick={openSignIn}
                    >
                        Sign In
                    </button>
                </div>
            </nav>

            {/* Sign-In Popup */}
            {isSignInOpen && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
                    <div className="absolute inset-0 bg-black bg-opacity-50" onClick={closeSignIn}></div>
                    <div className="relative w-96 bg-white rounded-lg p-8">
                        <h2 className="text-xl font-bold mb-4">Sign In</h2>
                        <form>
                            <input
                                type="text"
                                placeholder="Email"
                                className="w-full border border-gray-300 rounded px-3 py-2 mb-4 focus:outline-none focus:border-blue-500"
                            />
                            <input
                                type="password"
                                placeholder="Password"
                                className="w-full border border-gray-300 rounded px-3 py-2 mb-4 focus:outline-none focus:border-blue-500"
                            />
                            <button
                                type="submit"
                                className="w-full bg-indigo-600 text-white font-bold py-2 rounded hover:bg-indigo-700"
                            >
                                Sign In
                            </button>
                        </form>
                    </div>
                </div>
            )}
        </header>
    );
}

// NavLink component to manage active state
function NavLink({ to, label, activeLink, setActiveLink }) {
    const isActive = to === activeLink;

    return (
        <Link
            to={to}
            className={`text-sm text-gray-700 hover:text-gray-900 ${isActive ? 'font-bold' : ''}`}
            onClick={() => setActiveLink(to)}
        >
            {label}
        </Link>
    );
}










// export default function OffensiveSidbar() {


//     const navigate = useNavigate();
//     const [showPassword, setShowPassword] = useState(false);

//     const initialValues = {
//         email: '',
//         password: '',
//     };

//     const validationSchema = Yup.object().shape({
//         email: Yup.string().email('Invalid Phone no address').required('Phone-number is required'),
//         password: Yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),
//     });


//     const onSubmit = async (values, { setSubmitting, setErrors }) => {
//         try {
//             const response = await axios.post('https://delivery-point.onrender.com/customer/login', values);
//             console.log(response.data.signature)
//             if (response.status === 200) {
//                 const token = response.data.signature;
//                 const tokenData = localStorage.setItem('token', token);
//                 toast.success(response.data.message);
//                 navigate('/');
//             } else {
//                 const validationErrors = response.data.validation;
//                 if (validationErrors) {
//                     setErrors(validationErrors);

//                 }
//             }
//         } catch (error) {
//             if (error.response) {
//                 if (error.response.status === 400) {
//                     const validationErrors = error.response.data.msg;
//                     toast.error(validationErrors);
//                     setErrors(validationErrors);
//                 } else {
//                     // Handle other types of errors
//                     setErrors({ server: 'An unexpected error occurred' });
//                     console.error('Unexpected error:', error.message);
//                 }
//             } else {
//                 // The request was made but no response was received
//                 console.error('Error submitting form:', error.message);
//                 setErrors({ server: 'An unexpected error occurred' });
//             }
//         } finally {
//             setSubmitting(false);
//         }
//     };



//     return (
//         <>
//             <div>
//                 <button
//                     className=""
//                     type="button"
//                     data-bs-toggle="offcanvas"
//                     data-bs-target="#offcanvasRight"
//                     aria-controls="offcanvasRight"
//                 >
//                     SignIn
//                 </button>

//                 <div
//                     className="offcanvas offcanvas-end"
//                     tabIndex="-1"
//                     id="offcanvasRight"
//                     aria-labelledby="offcanvasRightLabel"
//                 >
//                     <div className="offcanvas-header">

//                         <button
//                             type="button"
//                             className="btn-close text-reset"
//                             data-bs-dismiss="offcanvas"
//                             aria-label="Close"
//                         ></button>
//                     </div>
//                     <div className="offcanvas-body">
//                         {/* Offcanvas content goes here */}
//                         <div className='flex h-[450px] justify-center items-center  py-5 '>
//                             <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>
//                                 {({ isSubmitting }) => (
//                                     <Form className="form w-[350px]">
//                                         <p className="title text-indigo-500 text-2xl font-semibold mb-4">LogIn </p>
//                                         <label className="block mb-2">
//                                             <Field className="input mt-1 block w-full border-gray-30" type="email" name="email" />
//                                             <ErrorMessage name="email" component="span" className="super text-red-700" />
//                                             {/* <span className="text-gray-700">Phone-no</span> */}
//                                         </label>

//                                         <button className="bg-[#6366f1] text-white font-semibold px-4 py-2  hover:bg-[#34369b] transition duration-300" type='submit' disabled={isSubmitting}>Submit</button>
//                                         <p className="text-gray-700 mt-4 text-center">Create an account ? <Link to="/sign-up" className="text-[#6366f1] hover:text-[#34369b] hover:underline">Signup</Link> </p>
//                                     </Form>
//                                 )}
//                             </Formik>
//                         </div>
//                     </div>
//                 </div>
//             </div>
//         </>
//     )
// }


<div className='absolute right-48'>
                            <Link to="/cart">
                                <svg
                                    className="w-10 h-10 hover:text-orange-600 text-indigo-800 cursor-pointer hidden sm:block"
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="24"
                                    height="24"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor"
                                >
                                    <path
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        strokeWidth="1"
                                        d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"
                                    />
                                </svg>
                                <span className='absolute top-0 left-9 text-orange-600'>
                                    ({totalQuantity})
                                </span>
                            </Link>
                        </div>

                        NNNNNNNNNNNNNNNNNNNAAAAAAAAAAAAAAAAAAAAVVVVVVVVVVVVVVVVBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAARRRRRRRRRRR

                        import React, { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import Dpointlogo from '../assets/logo/Dpointlogo1.png';
import { useDispatch, useSelector } from 'react-redux';
import { getCartTotal } from '../cart/cartSlice';
import OffensiveSidbar from './OffensiveSidbar';
import { useAuth } from '../context/authContext';

export default function Navbar() {
    const { isLoggedIn, setIsLoggedIn } = useAuth();
    const location = useLocation();
    const { cart, totalQuantity } = useSelector((state) => state.allCart);
    const [activeLink, setActiveLink] = useState('');
    const [isOpen, setIsOpen] = useState(false);

    const dispatch = useDispatch();

    useEffect(() => {
        dispatch(getCartTotal());
    }, [cart]);

    useEffect(() => {
        const currentPath = location.pathname;
        setActiveLink(currentPath);
    }, [location]);

    const handleLogout = async () => {
        // Logout logic
    };

    const toggleOffcanvas = () => {
        setIsOpen(!isOpen);
    };

    return (
        <section className="w-full px-4 py-3 bg-gray-100 md:px-8 text-gray-700">
            <div className="flex justify-between items-center">
                {/* Logo and Navigation Links */}
                <div className="flex items-center">
                    <Link to="/" className="flex items-center">
                        <img src={Dpointlogo} alt="Dpoint Logo" className="h-10 w-auto" />
                    </Link>
                    <nav className="hidden ml-4 space-x-4 md:flex">
                        <NavLink to="/" label="Home" activeLink={activeLink} setActiveLink={setActiveLink} />
                        <NavLink to="/menu" label="Menus" activeLink={activeLink} setActiveLink={setActiveLink} />
                    </nav>
                </div>

                {/* Search Input */}
                <form className="flex items-center space-x-2 md:ml-auto">
                    <input
                        type="text"
                        placeholder="Search for restaurants & foods ..."
                        className="w-full md:w-auto bg-white border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    <button
                        type="submit"
                        className="text-white bg-indigo-600 rounded-lg px-3 py-2 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            className="h-5 w-5"
                            viewBox="0 0 20 20"
                            fill="currentColor"
                        >
                            <path
                                fillRule="evenodd"
                                d="M13.915 12.616l3.255 3.255a1 1 0 11-1.415 1.414l-3.254-3.254a8 8 0 111.414-1.415zM10 16A6 6 0 100 10a6 6 0 0012 0 6 6 0 00-6 6z"
                                clipRule="evenodd"
                            />
                        </svg>
                    </button>
                </form>

                {/* Cart and Authentication Buttons */}
                <div className="flex items-center space-x-4">
                    <Link to="/cart" className="relative">
                        <svg
                            className="w-8 h-8 text-orange-400 hover:text-orange-600"
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            strokeWidth="2"
                            strokeLinecap="round"
                            strokeLinejoin="round"
                        >
                            <path d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4l1-12z" />
                        </svg>
                        <span className="absolute top-0 left-5 text-orange-600">{totalQuantity}</span>
                    </Link>
                    {!isLoggedIn ? (
                        <button
                            onClick={toggleOffcanvas}
                            className="hidden md:inline-block px-3 py-2 text-base font-medium leading-6 text-black hover:text-indigo-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                            Sign in
                        </button>
                    ) : (
                        <div className="relative">
                            <button className="text-base font-medium text-black hover:text-indigo-700 focus:outline-none">
                                Account
                            </button>
                            <div className="absolute left-0 mt-2 w-48 bg-white rounded-lg shadow-lg">
                                <Link to="/profile" className="block px-4 py-2 text-gray-800 hover:bg-indigo-100">
                                    Profile
                                </Link>
                                <button onClick={handleLogout} className="block px-4 py-2 text-gray-800 hover:bg-indigo-100">
                                    Logout
                                </button>
                            </div>
                        </div>
                    )}
                    {/* Mobile Menu Button */}
                    <button
                        className="md:hidden text-gray-600 focus:outline-none"
                        onClick={toggleOffcanvas}
                    >
                        <svg
                            className="w-6 h-6"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth="2"
                                d="M4 6h16M4 12h16M4 18h16"
                            />
                        </svg>
                    </button>
                </div>
            </div>

            {/* Offcanvas Menu for Mobile */}
            <OffensiveSidbar isOpen={isOpen} setIsOpen={setIsOpen} toggleOffcanvas={toggleOffcanvas} />
        </section>
    );
}

// NavLink component to manage active state
function NavLink({ to, label, activeLink, setActiveLink }) {
    const isActive = to === activeLink;

    return (
        <Link
            to={to}
            className={`text-black hover:text-indigo-700 ${isActive ? 'underline text-indigo-700' : ''}`}
            onClick={() => setActiveLink(to)}
        >
            {label}
        </Link>
    );
}











         {/* <div className="mt-4">
                                                        <textarea className="form-textarea mt-1 block w-full" rows="3"
                                                            placeholder="Any suggestions? We will pass it on..."></textarea>
                                                    </div> */}
                                    {/* <div className="mt-4">
                                                        <label className="inline-flex items-center">
                                                            <input type="checkbox" className="form-checkbox text-green-500" checked />
                                                            <span className="ml-2">Opt in for No-contact Delivery</span>
                                                        </label>
                                                    </div> */}






                                                          <Routes>
        <Route path="/login" element={<Login />} />
        <Route path="/sign-up" element={<SignUp />} />
        <Route path="/" element={<Home />} />
        <Route path="/checkout" element={<Checkout />} />
        <Route path="/menu" element={<MenuList />} />
        <Route path="/search" element={<Search />} />
        <Route path="/otp-verify" element={<OtpVerify />} />
        <Route path="/food-details/:pincode" element={<FoodDetails />} />
        <Route path="/food-details/:vendorId" element={<FoodDetails />} />
        <Route path="/cart" element={<CartPage />} />
        <Route path="/profile" element={<ProtectedRoute element={<Profile />} /> } />
        {/* <Route path="/profile/orders"  element={<ProtectedRoute element={<Orders />} /> } /> */}
        {/* <Route path="/cart" element={<ProtectedRoute element={<CartPage />} />} /> */}
        {/* <Route path="/cart" element={<ProtectedRoute Component={() => (<CartPage />)} />} /> */}
        <Route path="*" element={<PageNotFound />} />
      </Routes>



          // const handleCartAction = async (item) => {
    //     if (item.inCart) {
    //         dispatch(removeItem(item.id));
    //     }
    //     try {
    //         const payload = {
    //             _id: item._id,
    //             unit: 1
    //         }
    //         const response = await axios.post('https://delivery-point.onrender.com/customer/cart', payload, {
    //             headers: {
    //                 'Content-Type': 'application/json',
    //                 'Authorization': `Bearer ${token}`,
    //             }
    //         });
    //         // Check the response from the API
    //         if (response.status === 200) {
    //             dispatch(addToCart({ ...item, quantity: 1 }));
    //             toast.success(response.data.message);
    //         } else {
    //             console.error('Failed to add item to cart. Server responded with error.');
    //         }
    //     } catch (error) {
    //         console.log(error)
    //     }

    //     dispatch(addToCart({ ...item, quantity: 1 }));
    // };










    INfinte scroll


  const fetchDataCategory = async (categories, rating) => {
    try {
      let params = {
        foodType: categories.join(',')
      };

      if (rating) {
        params.rating = '4';
      }

      const response = await axios.get(`https://delivery-point.onrender.com/get-foods-bycategory?limit=6&page=${page}`, {
        params: params
      });
      if (response.status === 200) {
        const data = await response.data;
        setFilterData((prev) => [...prev, ...data]);
        setLoading(false);
      }
    } catch (error) {
      console.error('Error fetching food data:', error);
    }
  }

  const handelInfiniteScroll = async () => {
    try {
      if (
        window.innerHeight + document.documentElement.scrollTop + 1 >=
        document.documentElement.scrollHeight
      ) {
        setLoading(true);
        setPage((prev) => prev + 1);
      }
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    window.addEventListener("scroll", handelInfiniteScroll);
    return () => window.removeEventListener("scroll", handelInfiniteScroll);
  }, []);

  APpi 


export const getFoodByCategory = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const { foodType, rating, page, limit } = req.query;

        // Ensure foodType is treated as a string
        const foodTypeString = foodType as string;

        // Prepare query conditions based on request parameters
        const queryConditions: any = {};

        if (foodTypeString) {
            // Split comma-separated foodType string into an array of categories
            const selectedCategories = foodTypeString.split(',').map((category: string) => category.trim().toLowerCase());
            queryConditions.foodType = { $in: selectedCategories }; // Match any of the specified categories
        }

        if (rating) {
            // Validate and convert rating to a number
            const parsedRating = parseFloat(rating as string);
            if (isNaN(parsedRating) || parsedRating < 0 || parsedRating > 5) {
                return res.status(400).json({
                    status: 400,
                    message: 'Valid "rating" parameter is required as a number between 0 and 5'
                });
            }

            queryConditions.rating = { $gte: parsedRating }; // Filter by rating greater than or equal to specified value
        }

        const pageNumber = parseInt(page as string, 10) || 1; // default to page 1 if not specified or invalid
        const itemsPerPage = parseInt(limit as string, 10) || 6; // default to 9 items per page if not specified or invalid

        const skip = (pageNumber - 1) * itemsPerPage;

        // Query database with combined conditions
        const foods = await Food.find(queryConditions)
        .skip(skip)
        .limit(itemsPerPage);

        if (foods && foods.length > 0) {
            return res.status(200).json(foods);
        } else {
            // No food found for the specified criteria
            return res.status(200).json([]); // Return an empty array or object
        }
    } catch (error) {
        console.error('Error fetching food data:', error);
        return res.status(500).json({ message: 'Internal Server Error' });
    }
}



 <div style="color: rgb(255, 255, 255); background-color: rgb(138, 0, 0);" class=" flex flex-row justify-between block">
                <div class=" w-full mx-2 md:mx-auto">
                    <div class="flex justify-between md:justify-center gap-x-2 m-0 md:m-2 p-2 md:p-0">
                        <div class="mr-5 hidden md:flex justify-center items-center text-5xl"><img
                            src="https://namastedevprod.s3.ap-south-1.amazonaws.com/banner+and+logos/discount.png" alt="user"
                            width="60" height="60" class="object-contain"/></div>
                        <div class=" flex flex-col md:flex-row gap-x-4 md:gap-x-12">
                            <div>
                                <h1 class="font-semibold text-[11px] md:text-lg">Namaste Frontend System Design is here 🚀</h1>
                                <h1 class="font-bold md:font-bold text-[12px] md:text-xl">Coupon code : EARLYBIRD</h1>
                            </div>
                            <div>
                                <div class=" flex gap-x-2 md:gap-x-3">
                                    <div class="flex flex-col justify-center items-center"><b class="text-base md:text-2xl">0</b>
                                        <p class="text-[10px] md:text-sm">DAYS</p>
                                    </div>
                                    <p class=" flex justify-center items-center">:</p>
                                    <div class="flex flex-col justify-center items-center"><b class="text-base md:text-2xl">10</b>
                                        <p class="text-[10px] md:text-sm">HOURS</p>
                                    </div>
                                    <p class=" flex justify-center items-center">:</p>
                                    <div class="flex flex-col justify-center items-center"><b class="text-base md:text-2xl">27</b>
                                        <p class="text-[10px] md:text-sm">MINS</p>
                                    </div>
                                    <p class=" flex justify-center items-center">:</p>
                                    <div class="flex flex-col justify-center items-center"><b class="text-base md:text-2xl">04</b>
                                        <p class="text-[10px] md:text-sm">SECS</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="ml-0 md:ml-12 flex flex-col md:flex-row justify-end md:justify-center items-center "><a
                            href="https://namastedev.com/learn/namaste-frontend-system-design?coupon=EARLYBIRD"><button
                                style="background-color: rgb(40, 167, 69); color: rgb(255, 255, 255);"
                                class="btn font-semibold text-xs md:text-base px-4 md:px-8 btn-sm md:btn-md hover:bg-blend-darken rounded-full  border-none">ENROLL
                                NOW</button></a></div>
                    </div>
                </div>
                <div class="absolute top-0 md:top-3 right-0 md:right-3 flex flex-col md:flex-row items-end md:justify-end"><button
                    class="p-3"><svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24"
                        class="text-xl" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg">
                        <path fill="none" d="M0 0h24v24H0z"></path>
                        <path
                            d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z">
                        </path>
                    </svg></button></div>
            </div>